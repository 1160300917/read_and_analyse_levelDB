# Env - 2018-10-04 季宇恒

- [模块信息](#module_info)
- [模块概要](#module_in_brief)
- [模块功能](#module_function)
- [接口说明](#interface_specification)
- [相关依赖说明](#dependency_specification)
- [内部实现细节](#inner_detail)
- [参考资料](#reference)

&nbsp;   
<a id="module_info"></a>
## 模块信息
util/env.cc

include/leveldb/env.h

&nbsp;   
<a id="module_in_brief"></a>
## 模块概要
考虑到移植以及灵活性，leveldb将系统相关的处理（文件/进程/时间之类）抽象成Env，用户可以自己实现相应的接口，作为Option传入。默认使用自带的实现。
<a id="module_function"></a>
## 模块功能

返回一个适合当前操作的默认环境系统。成熟的用户可能希望提供自己的环境实现而不是依赖于这个默认环境。Default()的结果属于leveldb，永远不能删除。
用指定的名称创建一个全新的顺序可读文件。成功后，在*result中存储指向新文件的指针并返回OK。失败时在*result中存储NULL并返回non。如果文件不存在，返回非ok状态。返回的文件一次只能被一个线程访问。
创建一个全新的随机访问只读文件指定名称。成功时，将指向新文件的指针存储进去*结果并返回OK。在失败中，在*result和中存储NULL返回non-OK。如果文件不存在，返回一个非ok状态。返回的文件可能被多个线程并发访问。
创建一个用指定的对象写入新文件名字。删除任何同名的现有文件，并创建一个新文件。成功时，将指向新文件的指针存储进去*结果并返回OK。在失败中，在*result和中存储NULL返回non-OK。返回的文件一次只能被一个线程访问。
在*中存储指定目录的子目录的名称。这些名称与“dir”相关。删除*结果的原始内容。
锁定指定的文件。用于防止并发访问同一个数据库由多个进程组成。失败时，存储NULL*锁定并返回非ok。在成功时，存储一个指向表示的对象的指针在*lock中获取锁，返回OK。打电话的人应该打电话解锁文件(*锁)以释放锁。如果进程退出，锁会自动释放。如果别人已经锁上了，马上锁上失败了。此调用不等待现有锁走开。
在后台线程中运行一次“(*函数)(arg)”。“函数”可以在未指定的线程中运行。多种功能添加到同一个环境中，可以在不同的线程中并发运行。调用者可能不认为后台工作项是序列化。
启动一个新线程，在新线程中调用“function(arg)”。当“function(arg)”返回时，线程将被销毁。
*path设置为一个可以用于测试的临时目录。它可能或者许多东西不是刚刚创造出来的。目录可能不同，也可能不同在同一进程运行之间，但后续调用将返回相同的目录中。

&nbsp;   
<a id="interface_specification"></a>
## 接口说明

leveldb::Env

leveldb::FileLock

leveldb::Logger

leveldb::RandomAccessFile

leveldb::SequentialFile

leveldb::WritableFile

&nbsp;   
<a id="dependency_specification"></a>
## 相关依赖说明
需要Export类型的定义和用法
Export (include/leveldb/export.h)
需要Status类型的定义和用法
Export (include/leveldb/status.h)

操作需要返回值

&nbsp;   
<a id="inner_detail"></a>
## 内部实现细节

&nbsp;   
<a id="reference"></a>
## 参考资料
- [leveldb实现解析 - 淘宝-核心系统研发-存储](https://github.com/rsy56640/read_and_analyse_levelDB/blob/master/reference/DB%20leveldb%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90.pdf)
